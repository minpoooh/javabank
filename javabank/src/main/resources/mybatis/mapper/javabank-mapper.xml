<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
  
<mapper namespace="mybatis.javabank.javabank-mapper">

	<select id="findUsernameById" parameterType="String" resultType="UserDTO">
		select * from JB_User
		where userId = #{insertedUserId}
	</select>
	
	<select id="getMailUser" parameterType="String" resultType="UserDTO">
		select userId from JB_User
		where userEmail = #{userEmail}
	</select>
    
    <select id="getIdMailUser" parameterType="java.util.Map" resultType="UserDTO">
		select userId from JB_User
		where userEmail = #{userEmail}
		and userId = #{userId}
	</select>
	
	<update id="changedPwResult" parameterType="java.util.Map">
		update Jb_User
		set userPw = #{imsiPw}
		where userId = #{userId}
	</update>
    
    <insert id="joinUser" parameterType="java.util.Map">
    	insert into JB_User (userId, userPw, userName, userBirth, userEmail, userTel, userRoles, userRegDate)
    	values (#{userId}, #{userPw}, #{userName}, #{userBirth}, #{userEmail}, #{userTel}, 'USER', SYSDATE)
    </insert>
    
    <select id="checkID" parameterType="String" resultType="int">
    	select count(*) from JB_User
    	where userId = #{userId}
    </select>
    
    <select id="getUserName" parameterType="String" resultType="String">
    	select userName from JB_User
    	where userId = #{userId}
    </select>
    
    <select id="getAccountList" parameterType="String" resultType="DepositDTO">
    	select A.*, B.balance from JB_Deposit A
    						  join (
    						  		select accountSeq, depositAccount, balance, ROW_NUMBER() over (Partition by depositAccount order by accountSeq desc) as rn
    						  		from JB_Dtransaction    						  
    						  		) B
    						  on A.depositAccount = B.depositAccount
    	where A.userId = #{userId}
    	and B.rn = 1
    </select>
    
    <select id="getFixedDepositList" parameterType="String" resultType="ProductDTO">
    	select A.*, B.balance from JB_Product A
    						  join JB_Ptransaction B
    								on A.productAccount = B.productAccount
    	where userId = #{userId}
    	and A.category = '정기예금'
    </select>
    
    <select id="getPeriodicalDepositList" parameterType="String" resultType="ProductDTO">
    	select A.*, B.balance from JB_Product A
    						  join JB_Ptransaction B
    								on A.productAccount = B.productAccount
    	where userId = #{userId}
    	and A.category = '정기적금'
    </select>
    
    <select id="getDepositAccountCheck" parameterType="String" resultType="int">
    	select count(*) from JB_Deposit
    	where depositAccount = #{depositNum}
    </select>
    
    <select id="getDepositAccountCnt" parameterType="String" resultType="int">
    	select count(*) from JB_Deposit
    	where userId = #{userId}
    </select>
    
    <insert id="insertDeposit" parameterType="java.util.Map">
    	insert into JB_Deposit(depositAccount, userId, depositPw, category, regDate, interestRate, transactionLimit, mainAccount) 
    	values (#{depositAccount}, #{userId}, #{depositPw}, '입출금통장', SYSDATE, 0.001, #{transactionLimit}, #{mainAccount})
    </insert>
    
    <insert id="insertTransaction" parameterType="java.util.Map">
    	insert into JB_Dtransaction(accountSeq, depositAccount, userId, updateDate, type, memo, deltaAmount, balance, transferAccount) 
    	values (accountSeq.NextVal, #{depositAccount}, #{userId}, SYSDATE, '개설', NULL, 0, 0, NULL)
    </insert>
    
    <select id="getDepositInfo" parameterType="String" resultType="DepositDTO">
    	select * from JB_Deposit
    	where DepositAccount = #{depositAccount}
    </select>
    
    <select id="getDepositBalance" parameterType="String" resultType="int">
    	select balance from JB_Dtransaction
    	where DepositAccount = #{depositAccount}
    	order by AccountSeq desc
    	fetch first 1 rows only
    </select>
    
    <select id="getDepositTransaction" parameterType="String" resultType="DtransactionDTO">
    	select A.*, B.userName from JB_Dtransaction A
    			 join JB_User B
    			 	on A.userId = B.userId
    	where A.DepositAccount = #{depositAccount}
    			and A.updateDate between #{period} and #{today}
    			<if test="details == 'deposit'">
    			and (A.type = '입금' OR A.type = '이자 입금')
    			</if>
    			<if test="details == 'withdraw'">
    			and A.type = '출금'
    			</if>
    	order by A.accountSeq desc
    </select>
   
    
    <select id="getDepositPw" parameterType="String" resultType="String">
    	select depositPw from JB_Deposit
    	where depositAccount = #{depositAccount}
    </select>
    
    <select id="getMyAccountList" parameterType="String" resultType="DepositDTO">
    	select category, depositAccount from JB_Deposit
    	where userId = #{userId}
    	order by regDate asc
    </select>
    
    <select id="getMyTransactionList" parameterType="String" resultType="DtransactionDTO">
    	select A.transferAccount, A.userID, B.userName, A.updateDate
		from(
		        select transferAccount, userID, updateDate
		        from (
		                select transferAccount, userId, updateDate, ROW_NUMBER() over (Partition by transferAccount order by accountSeq desc) as rn
		                from JB_Dtransaction
		                where type != '개설'
		                and type = '출금'
		        )
		        where rn = 1
		)A
		join JB_User B
		on A.userId = B.userId
    </select>
    
    <select id="getCheckAccountExist" parameterType="String" resultType="int">
    	select count(*) from JB_Deposit
    	where depositAccount = #{transferAccount}
    </select>
    
    <select id="getAccountName" parameterType="String" resultType="String">
    	select B.userName from JB_Deposit A
    					  join JB_User B
    					  on A.userId = B.userId
    	where A.depositAccount = #{depositAccount}
    	
    </select>
    
    <select id="getReceiveUserId" parameterType="String" resultType="String">
    	select userId from JB_Deposit
    	where depositAccount = #{depositAccount}
    </select>    
    
    <select id="getDepositBalanceOnly" parameterType="String" resultType="int">
    	select balance 
		from (
		        select depositAccount, balance, updateDate, row_number() over(Partition by depositAccount order by accountSeq desc) as rn
		        from JB_Dtransaction
		        where depositAccount = #{depositAccount}
		)
		where rn = 1
    </select>
    
    <insert id="withdrawProcess" parameterType="java.util.Map">
    	insert into JB_Dtransaction (accountSeq, depositAccount, userId, updateDate, type, memo, deltaAmount, balance, transferAccount)
    	values (accountSeq.nextVal, #{depositAccount}, #{receiveUserId}, SYSDATE, '출금', #{inputMemo}, #{sendMoneyAmount}, #{depositBalance}, #{inputAccount})
    </insert>
    
    <insert id="depositProcess" parameterType="java.util.Map">
    	insert into JB_Dtransaction (accountSeq, depositAccount, userId, updateDate, type, memo, deltaAmount, balance, transferAccount)
    	values (accountSeq.nextVal, #{inputAccount}, #{userId}, SYSDATE, '입금', #{inputMemo}, #{sendMoneyAmount}, #{receiveBalance}, #{depositAccount})
    </insert>
    
    <select id="allDepositAccountList" resultType="DepositDTO">
		select depositAccount, interestRate, balance from (
    							select A.depositAccount, A.interestRate, B.balance, row_number() over(partition by A.depositAccount order by accountSeq desc)as rn
    							from JB_Deposit A
    							join JB_Dtransaction B
    							on A.depositAccount = B.depositAccount
    							)
    	where rn = 1
    </select>
    
    <insert id="insertSumInterest" parameterType="java.util.Map">
    	insert into JB_Dtransaction (accountSeq, depositAccount, userId, updateDate, type, memo, deltaAmount, balance, transferAccount)
    	values (accountSeq.nextVal, #{depositAccount}, 'JAVABANK', SYSDATE, '이자 입금', NULL, #{deltaAmount}, #{balance}, '')
    </insert>
    
    <select id="getFixedAccountCheck" parameterType="String" resultType="int">
    	select count(*) from JB_Product
    	where productAccount = #{depositNum}
    </select>
    
    <insert id="insertProduct" parameterType="java.util.Map">
    	insert into JB_Product(productAccount, userId, productPw, category, autoTransferDate, monthlyPayment, payment, regDate, expiryDate, interestRate, depositAccount) 
    	values (#{productAccount}, #{userId}, #{productPw}, '정기예금', NULL, NULL, #{payment}, SYSDATE, #{expiryDate}, #{interestRate}, #{depositAccount})
    </insert>
    
    <insert id="insertPtransaction" parameterType="java.util.Map">
    	insert into JB_Ptransaction(productSeq, productAccount, updateDate, type, memo, deltaAmount, balance) 
    	values (productSeq.NextVal, #{productAccount}, SYSDATE, '가입', NULL, #{payment}, #{payment})
    </insert>
    
    <select id="getBalancebyFixed" parameterType="java.util.Map" resultType="int">
    	select balance from JB_Dtransaction
    	where DepositAccount = #{depositAccount}
    	order by AccountSeq desc
    	fetch first 1 rows only
    </select>
    
    <insert id="insertDtransactionbyFixed" parameterType="java.util.Map">
    	insert into JB_Dtransaction(accountSeq, depositAccount, userId, updateDate, type, memo, deltaAmount, balance, transferAccount) 
    	values (accountSeq.NextVal, #{depositAccount}, #{userId}, SYSDATE, '출금', '정기예금 가입', #{payment}, #{balance}, #{productAccount})
    </insert>
    
</mapper>