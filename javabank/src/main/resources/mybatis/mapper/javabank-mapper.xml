<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
  
<mapper namespace="mybatis.javabank.javabank-mapper">

	<select id="findUsernameById" parameterType="String" resultType="UserDTO">
		select * from JB_User
		where userId = #{insertedUserId}
	</select>
	
	<select id="getMailUser" parameterType="String" resultType="UserDTO">
		select userId from JB_User
		where userEmail = #{userEmail}
	</select>
    
    <select id="getIdMailUser" parameterType="java.util.Map" resultType="UserDTO">
		select userId from JB_User
		where userEmail = #{userEmail}
		and userId = #{userId}
	</select>
	
	<update id="changedPwResult" parameterType="java.util.Map">
		update Jb_User
		set userPw = #{imsiPw}
		where userId = #{userId}
	</update>
    
    <insert id="joinUser" parameterType="java.util.Map">
    	insert into JB_User (userId, userPw, userName, userBirth, userEmail, userTel, userRoles, userRegDate)
    	values (#{userId}, #{userPw}, #{userName}, #{userBirth}, #{userEmail}, #{userTel}, 'USER', SYSDATE)
    </insert>
    
    <select id="checkID" parameterType="String" resultType="int">
    	select count(*) from JB_User
    	where userId = #{userId}
    </select>
    
    <select id="getUserName" parameterType="String" resultType="String">
    	select userName from JB_User
    	where userId = #{userId}
    </select>
    
    <select id="getAccountList" parameterType="String" resultType="DepositDTO">
    	select A.*, B.balance from JB_Deposit A
    						  join (
    						  		select accountSeq, depositAccount, balance, ROW_NUMBER() over (Partition by depositAccount order by accountSeq desc) as rn
    						  		from JB_Dtransaction    						  
    						  		) B
    						  on A.depositAccount = B.depositAccount
    	where A.userId = #{userId}
    	and A.depositEnable = 'Y'
    	and B.rn = 1
    	order by mainAccount desc
    </select>
    
    <select id="getFixedDepositList" parameterType="String" resultType="ProductDTO">
    	select A.*, B.balance from JB_Product A
    							join (
							    	select productSeq, productAccount, balance, ROW_NUMBER() over (Partition by productAccount order by productSeq desc) as rn
							    	from JB_Ptransaction
							    	) B
							    on A.productAccount = B.productAccount
		where A.userId = #{userId}
		and A.category = '정기예금'
		and A.productEnable = 'Y'
		and B.rn = 1
    </select>
    
    <select id="getPeriodicalDepositList" parameterType="String" resultType="ProductDTO">
    	select A.*, B.balance from JB_Product A
    							join (
							    	select productSeq, productAccount, balance, ROW_NUMBER() over (Partition by productAccount order by productSeq desc) as rn
							    	from JB_Ptransaction
							    	) B
							    on A.productAccount = B.productAccount
		where A.userId = #{userId}
		and A.category = '정기적금'
		and A.productEnable = 'Y'
		and B.rn = 1
    </select>
    
    <select id="getDepositAccountCheck" parameterType="String" resultType="int">
    	select count(*) from JB_Deposit
    	where depositAccount = #{depositNum}
    </select>
    
    <select id="getDepositAccountCnt" parameterType="String" resultType="int">
    	select count(*) from JB_Deposit
    	where userId = #{userId}
    	and depositEnable = 'Y'
    </select>
    
    <insert id="insertDeposit" parameterType="java.util.Map">
    	insert into JB_Deposit(depositAccount, userId, depositPw, category, regDate, interestRate, transactionLimit, mainAccount, depositEnable) 
    	values (#{depositAccount}, #{userId}, #{depositPw}, '입출금통장', SYSDATE, 0.001, #{transactionLimit}, #{mainAccount}, 'Y')
    </insert>
    
    <insert id="insertTransaction" parameterType="java.util.Map">
    	insert into JB_Dtransaction(accountSeq, depositAccount, userId, updateDate, type, memo, deltaAmount, balance, transferAccount) 
    	values (accountSeq.NextVal, #{depositAccount}, #{userId}, SYSDATE, '개설', NULL, 0, 0, NULL)
    </insert>
    
    <select id="getDepositInfo" parameterType="String" resultType="DepositDTO">
    	select * from JB_Deposit
    	where DepositAccount = #{depositAccount}
    </select>
    
    <select id="getDepositBalance" parameterType="String" resultType="int">
    	select balance from JB_Dtransaction
    	where DepositAccount = #{depositAccount}
    	order by AccountSeq desc
    	fetch first 1 rows only
    </select>
    
    <select id="getDepositTransaction" parameterType="String" resultType="DtransactionDTO">
    	select A.*, B.userName from JB_Dtransaction A
    			 join JB_User B
    			 	on A.userId = B.userId
    	where A.DepositAccount = #{depositAccount}
    			and A.updateDate between #{period} and #{today}
    			<if test="details == 'deposit'">
    			and (A.type = '입금' OR A.type = '이자 입금' OR A.type = '상품해지 입금' OR A.type = '상품만기 입금')
    			</if>
    			<if test="details == 'withdraw'">
    			and (A.type = '출금' OR A.type = '상품가입 출금')
    			</if>
    	order by A.accountSeq desc
    </select>
   
    
    <select id="getDepositPw" parameterType="String" resultType="String">
    	select depositPw from JB_Deposit
    	where depositAccount = #{depositAccount}
    </select>
    
    <select id="getMyAccountList" parameterType="String" resultType="DepositDTO">
    	select category, depositAccount from JB_Deposit
    	where userId = #{userId}
    	and depositEnable = 'Y'
    	order by regDate asc
    </select>
    
    <select id="getMyTransactionList" parameterType="String" resultType="DtransactionDTO">
    	select A.transferAccount, A.userID, B.userName, A.updateDate
		from(
		        select transferAccount, userID, updateDate
		        from (
		                select transferAccount, userId, updateDate, ROW_NUMBER() over (Partition by transferAccount order by accountSeq desc) as rn
		                from JB_Dtransaction
		                where type != '개설'
		                and type = '출금'
		        )
		        where rn = 1
		)A
		join JB_User B
		on A.userId = B.userId
    </select>
    
    <select id="getCheckAccountExist" parameterType="String" resultType="int">
    	select count(*) from JB_Deposit
    	where depositAccount = #{transferAccount}
    </select>
    
    <select id="getAccountName" parameterType="String" resultType="String">
    	select B.userName from JB_Deposit A
    					  join JB_User B
    					  on A.userId = B.userId
    	where A.depositAccount = #{depositAccount}
    	
    </select>
    
    <select id="getDepositUserId" parameterType="String" resultType="String">
    	select userId from JB_Deposit
    	where depositAccount = #{depositAccount}
    </select>    
    
    <select id="getDepositBalanceOnly" parameterType="String" resultType="int">
    	select balance 
		from (
		        select depositAccount, balance, updateDate, row_number() over(Partition by depositAccount order by accountSeq desc) as rn
		        from JB_Dtransaction
		        where depositAccount = #{depositAccount}
		)
		where rn = 1
    </select>
    
    <insert id="withdrawProcess" parameterType="java.util.Map">
    	insert into JB_Dtransaction (accountSeq, depositAccount, userId, updateDate, type, memo, deltaAmount, balance, transferAccount)
    	values (accountSeq.nextVal, #{depositAccount}, #{receiveUserId}, SYSDATE, '출금', #{inputMemo}, #{sendMoneyAmount}, #{depositBalance}, #{inputAccount})
    </insert>
    
    <insert id="depositProcess" parameterType="java.util.Map">
    	insert into JB_Dtransaction (accountSeq, depositAccount, userId, updateDate, type, memo, deltaAmount, balance, transferAccount)
    	values (accountSeq.nextVal, #{inputAccount}, #{userId}, SYSDATE, '입금', #{inputMemo}, #{sendMoneyAmount}, #{receiveBalance}, #{depositAccount})
    </insert>
    
    <select id="allDepositAccountList" resultType="DepositDTO">
		select D.userId, C.depositAccount, C.interestRate, C.balance 
			from(
	             select A.depositAccount, A.interestRate, A.userId, B.balance, row_number() over(partition by A.depositAccount order by accountSeq desc)as rn
	             from JB_Deposit A
	             join JB_Dtransaction B
	             on A.depositAccount = B.depositAccount
	             where A.depositEnable = 'Y'
	        ) C
	        join JB_User D
            on C.userId = D.userId
        where C.rn = 1
    </select>
    
    <insert id="insertSumInterest" parameterType="java.util.Map">
    	insert into JB_Dtransaction (accountSeq, depositAccount, userId, updateDate, type, memo, deltaAmount, balance, transferAccount)
    	values (accountSeq.nextVal, #{depositAccount}, 'JAVABANK', SYSDATE, '이자 입금', NULL, #{deltaAmount}, #{balance}, '')
    </insert>
    
    <update id="cancelAccount" parameterType="java.util.Map">
    	update JB_deposit set depositEnable = 'N'
    	where depositAccount = #{depositAccount}
    </update>
    
    <select id="getFixedAccountCheck" parameterType="String" resultType="int">
    	select count(*) from JB_Product
    	where productAccount = #{depositNum}
    </select>
    
    <insert id="insertFixedProduct" parameterType="java.util.Map">
    	insert into JB_Product(productAccount, userId, productPw, category, autoTransferDate, monthlyPayment, payment, regDate, expiryDate, interestRate, depositAccount, productEnable) 
    	values (#{productAccount}, #{userId}, #{productPw}, '정기예금', NULL, NULL, #{payment}, SYSDATE, #{expiryDate}, #{interestRate}, #{depositAccount}, 'Y')
    </insert>
    
    <insert id="insertFixedPtransaction" parameterType="java.util.Map">
    	insert into JB_Ptransaction(productSeq, productAccount, updateDate, type, memo, deltaAmount, balance) 
    	values (productSeq.NextVal, #{productAccount}, SYSDATE, '상품가입 입금', '정기예금 가입', #{payment}, #{payment})
    </insert>
    
    <select id="getBalancebyProduct" parameterType="java.util.Map" resultType="int">
    	select balance from JB_Dtransaction
    	where DepositAccount = #{depositAccount}
    	order by AccountSeq desc
    	fetch first 1 rows only
    </select>
    
    <insert id="insertDtransactionbyFixed" parameterType="java.util.Map">
    	insert into JB_Dtransaction(accountSeq, depositAccount, userId, updateDate, type, memo, deltaAmount, balance, transferAccount) 
    	values (accountSeq.NextVal, #{depositAccount}, #{userId}, SYSDATE, '상품가입 출금', '정기예금', #{payment}, #{balance}, #{productAccount})
    </insert>    
    
    <select id="getProductInfo" parameterType="String" resultType="ProductDTO">
    	select * from JB_Product
    	where productAccount = #{productAccount}
    </select>
    
    <select id="getProductBalance" parameterType="String" resultType="int">
    	select balance from JB_Ptransaction
    	where productAccount = #{productAccount}
    	order by productSeq desc
    	fetch first 1 rows only
    </select>
    
    <select id="getProductTransaction" parameterType="String" resultType="PtransactionDTO">
    	select * from JB_Ptransaction
    	where productAccount = #{productAccount}
    	order by productSeq desc
    </select>
    
    <update id="updateProductEnableN" parameterType="java.util.Map">
    	update JB_Product set productEnable = 'N'
    	where productAccount = #{productAccount}
    </update>
    
    <insert id="insertPtransactionbyFixedCancel" parameterType="java.util.Map">
    	insert into JB_Ptransaction(productSeq, productAccount, updateDate, type, memo, deltaAmount, balance) 
    	values (productSeq.NextVal, #{productAccount}, SYSDATE, '중도해지', '정기예금 해지', -#{payment}, 0)
    </insert>
    
    <insert id="insertDtransactionbyFixedCancel" parameterType="java.util.Map">
    	insert into JB_Dtransaction(accountSeq, depositAccount, userId, updateDate, type, memo, deltaAmount, balance, transferAccount) 
    	values (accountSeq.NextVal, #{depositAccount}, #{userId}, SYSDATE, '상품해지 입금', '정기예금', #{deltaAmount}, #{balance}, #{productAccount})
    </insert>
    
    <select id="getDepositMaturity" parameterType="String" resultType="ProductDTO">
    	select * from JB_product
    	where expiryDate = #{today}
    	and productEnable = 'Y'
    </select>
 
    <insert id="updateExpiryFixedTransaction" parameterType="java.util.Map">
    	insert into JB_Ptransaction(productSeq, productAccount, updateDate, type, memo, deltaAmount, balance) 
    	values (productSeq.NextVal, #{productAccount}, SYSDATE, '만기해지', '정기예금 만기', -#{payment}, 0)
    </insert>
    
    <insert id="insertDtransactionbyFixedExpiry" parameterType="java.util.Map">
    	insert into JB_Dtransaction(accountSeq, depositAccount, userId, updateDate, type, memo, deltaAmount, balance, transferAccount) 
    	values (accountSeq.NextVal, #{depositAccount}, #{userId}, SYSDATE, '상품만기 입금', '정기예금', #{deltaAmount}, #{balance}, #{productAccount})
    </insert>
    
    <!-- // -->
    
    <insert id="insertPeriodicalProduct" parameterType="java.util.Map">
    	insert into JB_Product(productAccount, userId, productPw, category, autoTransferDate, monthlyPayment, payment, regDate, expiryDate, interestRate, depositAccount, productEnable) 
    	values (#{productAccount}, #{userId}, #{productPw}, '정기적금', #{autoTransferDate}, #{monthlyPayment}, NULL, SYSDATE, #{expiryDate}, #{interestRate}, #{depositAccount}, 'Y')
    </insert>
    
    <insert id="insertPeriodicalPtransaction" parameterType="java.util.Map">
    	insert into JB_Ptransaction(productSeq, productAccount, updateDate, type, memo, deltaAmount, balance) 
    	values (productSeq.NextVal, #{productAccount}, SYSDATE, '상품가입 입금', '정기적금 가입', #{monthlyPayment}, #{monthlyPayment})
    </insert>
    
    <insert id="insertDtransactionbyPeriodical" parameterType="java.util.Map">
    	insert into JB_Dtransaction(accountSeq, depositAccount, userId, updateDate, type, memo, deltaAmount, balance, transferAccount) 
    	values (accountSeq.NextVal, #{depositAccount}, #{userId}, SYSDATE, '상품가입 출금', '정기적금', #{monthlyPayment}, #{balance}, #{productAccount})
    </insert>
    
    <insert id="insertPtransactionbyPeriodicalCancel" parameterType="java.util.Map">
    	insert into JB_Ptransaction(productSeq, productAccount, updateDate, type, memo, deltaAmount, balance) 
    	values (productSeq.NextVal, #{productAccount}, SYSDATE, '중도해지', '정기적금 해지', -#{productBalance}, 0)
    </insert>
    
    <insert id="insertDtransactionbyPeriodicalCancel" parameterType="java.util.Map">
    	insert into JB_Dtransaction(accountSeq, depositAccount, userId, updateDate, type, memo, deltaAmount, balance, transferAccount) 
    	values (accountSeq.NextVal, #{depositAccount}, #{userId}, SYSDATE, '상품해지 입금', '정기적금', #{deltaAmount}, #{balance}, #{productAccount})
    </insert>
    
    <!--  -->
    
    <insert id="updateExpiryPeriodicalTransaction" parameterType="java.util.Map">
    	insert into JB_Ptransaction(productSeq, productAccount, updateDate, type, memo, deltaAmount, balance) 
    	values (productSeq.NextVal, #{productAccount}, SYSDATE, '만기해지', '정기적금 만기', -#{deltaAmount}, 0)
    </insert>
    
    <insert id="insertDtransactionbyPeriodicalExpiry" parameterType="java.util.Map">
    	insert into JB_Dtransaction(accountSeq, depositAccount, userId, updateDate, type, memo, deltaAmount, balance, transferAccount) 
    	values (accountSeq.NextVal, #{depositAccount}, #{userId}, SYSDATE, '상품만기 입금', '정기적금', #{deltaAmount}, #{balance}, #{productAccount})
    </insert>
    
    <select id="getTransferPeriodicalAccount" parameterType="int" resultType="ProductDTO">
    	select * from JB_Product
    	where AutoTransferDate = #{date}
    </select>
    
    <insert id="insertAutoTransferDtransaction" parameterType="java.util.Map">
    	insert into JB_Dtransaction(accountSeq, depositAccount, userId, updateDate, type, memo, deltaAmount, balance, transferAccount) 
    	values (accountSeq.NextVal, #{depositAccount}, #{userId}, SYSDATE, '출금', '적금 자동이체', #{monthlyPayment}, #{balance}, #{productAccount})
    </insert>
    
    <insert id="insertAutoTransferPtransaction" parameterType="java.util.Map">
    	insert into JB_Ptransaction(productSeq, productAccount, updateDate, type, memo, deltaAmount, balance) 
    	values (productSeq.NextVal, #{productAccount}, SYSDATE, '입금', '자동이체 입금', #{monthlyPayment}, #{productBalance})
    </insert>
    
    <select id="getAlarmList" parameterType="String" resultType="AlarmDTO">
    	select * from JB_Alarm
    	where userId = #{userId}
    	and alarmIsRead = 'Y'
    	order by alarmRegDate desc
    </select>
    
    <select id="getNewAlarmList" parameterType="String" resultType="AlarmDTO">
    	select * from JB_Alarm
    	where userId = #{userId}
    	and alarmIsRead = 'N'
    	order by alarmRegDate desc
    </select>
    
    <insert id="insertAlarm" parameterType="java.util.Map">
    	insert into JB_alarm(alarmSeq, userId, alarmIsRead, alarmCate, alarmCont, alarmRegDate)
    	values (alarmSeq.nextVal, #{userId}, 'N', #{alarmCate}, #{alarmCont}, SYSDATE)
    </insert>
    
    <update id="updateReadY" parameterType="String">
    	update JB_alarm set alarmIsRead = 'Y'
    	where alarmIsRead = 'N'
    	and userId = #{userId}
    </update>
    
    <select id="getSortedAlarmList" parameterType="java.util.Map" resultType="AlarmDTO">
    	select * from JB_alarm
    	where userId = #{userId}
    	and alarmCate = #{alarmCate}
    	order by alarmRegDate desc
    </select>
    
    <select id="checkNotReadAlarm" parameterType="String" resultType="int">
    	select count(*) from JB_alarm
    	where userId = #{userId}
    	and alarmIsRead = 'N'
    </select>
    
    <select id="getExpiryDepositList" parameterType="String" resultType="DepositDTO">
    	select * from JB_Deposit
    	where userId = #{userId}
    	and depositEnable = 'N'
    	order by regDate desc
    </select>
    
    <select id="getExpiryProductList" parameterType="String" resultType="ProductDTO">
    	select * from JB_Product
    	where userId = #{userId}
    	and productEnable = 'N'
    	order by expiryDate desc
    </select>
    
    <select id="getAccountCnt" parameterType="String" resultType="int">
    	select count(*) from JB_Deposit
    	where userId = #{userId}
    	and depositEnable = 'Y'
    </select>
    
    <select id="getMainAccountCnt" parameterType="String" resultType="int">
    	select count(*) from JB_Deposit
    	where userId = #{userId}
    	and mainAccount = 'Y'
    	and depositEnable = 'Y'
    </select>
    
    <select id="getMainAccount" parameterType="String" resultType="String">
    	select mainAccount from JB_Deposit
    	where depositAccount = #{depositAccount}
    	and depositEnable = 'Y'
    </select>
    
    <update id="updateMainAccountN" parameterType="String">
    	update JB_deposit set mainAccount = 'N'
    	where depositAccount = #{depositAccount}
    </update>
    
    <update id="updateMainAccountY" parameterType="String">
    	update JB_deposit set mainAccount = 'Y'
    	where depositAccount = #{depositAccount}
    </update>
</mapper>